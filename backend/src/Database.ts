//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { medicationsEntity } from './db/medications.entity';
import { transactionsEntity } from './db/transactions.entity';
import { notificationsEntity } from './db/notifications.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      medicationsEntity,
      transactionsEntity,
      notificationsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      medications: [
        {
          name: 'name 1',
          description: 'description 1',
          quantityInStock: 1,
          minQuantityForAlert: 1,
          id: 3,
        },
        {
          name: 'name 2',
          description: 'description 2',
          quantityInStock: 2,
          minQuantityForAlert: 2,
          id: 36,
        },
        {
          name: 'name 3',
          description: 'description 3',
          quantityInStock: 3,
          minQuantityForAlert: 3,
          id: 74,
        },
        {
          name: 'name 4',
          description: 'description 4',
          quantityInStock: 4,
          minQuantityForAlert: 4,
          id: 46,
        },
        {
          name: 'name 5',
          description: 'description 5',
          quantityInStock: 5,
          minQuantityForAlert: 5,
          id: 39,
        },
      ],
      transactions: [
        {
          medicationId: 1,
          quantityDispensed: 1,
          remainingQuantity: 1,
          totalCost: 0.88,
          id: 18,
        },
        {
          medicationId: 2,
          quantityDispensed: 2,
          remainingQuantity: 2,
          totalCost: 0.26,
          id: 66,
        },
        {
          medicationId: 3,
          quantityDispensed: 3,
          remainingQuantity: 3,
          totalCost: 0.22,
          id: 6,
        },
        {
          medicationId: 4,
          quantityDispensed: 4,
          remainingQuantity: 4,
          totalCost: 0.79,
          id: 75,
        },
        {
          medicationId: 5,
          quantityDispensed: 5,
          remainingQuantity: 5,
          totalCost: 0.22,
          id: 24,
        },
      ],
      notifications: [
        { medicationId: 1, message: 'message 1', id: 23 },
        { medicationId: 2, message: 'message 2', id: 79 },
        { medicationId: 3, message: 'message 3', id: 23 },
        { medicationId: 4, message: 'message 4', id: 60 },
        { medicationId: 5, message: 'message 5', id: 92 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('medicationsEntity', data.medications);
      await this.SeedResource('transactionsEntity', data.transactions);
      await this.SeedResource('notificationsEntity', data.notifications);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
